### What is DevOps?

DevOps is the combination of industry best practices, and set of tools that improves an organizationâ€™s ability to:

    Increase the speed of software delivery
    Increases the speed of software evolution
    Have better reliability of the software
    Have scalability using automation,
    Improved collaboration among teams.

#### In other words, these tools enable a company to showcase industry best practices in software development.

In the DevOps model, development and operations teams are merged into a single team. These DevOps teams use a few tools and best practices to accomplish their goals efficiently. Some of these best practices are:

    Continuous Integration / Continuous Delivery (CI/CD)
    Microservices
    Infrastructure as Code (IaaC) - Configuration Management and Policy as a Code
    Monitoring and Logging
    Communication and Collaboration

#### What is CI/CD?

CI/CD stands for Continuous Integration/Continuous Delivery , and it is essentially a consistent and automated way for a DevOps team to build, package, and test applications.

    Continuous Integration means newly developed code changes of a project are regularly built, tested, and merged to a shared repository like git.

    Continuous Delivery is the process of automating the release of the merged and validated code to a repository and finally release a production-ready build to the production environment.

As shown in the figure above, CI/CD Pipeline implementation, is the backbone of the modern DevOps environment. It bridges the gap between development and operations teams by automating the building, testing, and deployment of applications.

![Alt text](images.png?raw=true "A CI/CD Pipeline under DevOps model to show quick delivery and evolution of software")

![Alt text](CI_CD.png?raw=true "A CI/CD Pipeline under DevOps model to show quick delivery and evolution of software")

### Docker

Docker is a tool that helps to create "images". An "image" (or Docker image) is a portable package that contains the application and its dependencies. An "image" can be instantiated multiple numbers of times to create "containers".

#### Containers

OS level virtualization allows us to run multiple isolated user-space instances in parallel. A "container" (or Docker container) is the isolated user-space instance that has the application code, the required dependencies, and the necessary runtime environment to run the application. Containers can dash on heterogeneous platforms.

#### Benefit of Containers

    Docker images make it easier for developers to create, deploy, and run applications on different hardware and platforms, quickly and easily. Docker has become an essential tool in CI/CD pipeline as it allows software developers a consistent and automated way to build, package, and test applications.
    
    Containers share a single kernel and share application libraries.
    
    Containers cause a lower system overhead as compared to Virtual Machines.

##### Installing and Using Docker

We will deploy our application on a Virtual Machine (VM) on Amazon Web Service (AWS) cloud. The VM that we will use would be a Linux machine having the Docker package already available on it. The following are the commands to install Docker on a Linux machine:

```shell script
# download and install Docker
sudo yum install docker

# add a user group to Docker
sudo usermod -a -G docker $USER

# start Docker service
sudo service docker start
```

Alternatively, if you wish to install ```Docker``` locally, you can refer to the official "Download and Install" section. The following are basic commands used with Docker:

* ```docker build .``` will run the Dockerfile to create an image. A Dockerfile is a text file that contains commands as a step-by-step recipe on how to build up your image. In our case, we would not use a Dockerfile because we will use a pre-created ```jenkinsci/blueocean``` image to instantiate a container. For more details about Dockerfile, refer the Build and run your image page.
* ```docker images``` will print all the available images
* ```docker run {IMAGE_ID}``` will run a container with the image
* ```docker exec -it sh``` to attach to a container
* ```docker ps``` will print all the running containers
* ```docker kill {CONTAINER_ID}``` will terminate the container
